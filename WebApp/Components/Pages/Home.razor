@page "/"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Query performance page!</h1>
<p>To start the queries click on the button</p>

<button @onclick="RunQueries" class="btn btn-primary" disabled="@isLoading">
    @if (isLoading)
    {
        <div>
            <h2>List of executed queries</h2>
            <p>(Some of the queries will take a lot more time to execute)</p>
            @foreach (var message in latestMessages)
            {
                <p>@message</p>
            }
        </div>
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        <span>Loading...</span>
    }
    else
    {
        <span>Run Queries</span>
    }
</button>

<div>
    @if (results != null && results.Count > 0)
    {
        <h2>Query Results</h2>
        <table class="table">
            <thead>
                <tr>
                    <th>Task Name</th>
                    <th>Elapsed Milliseconds</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var result in results)
                {
                    <tr>
                        <td>@result.TaskName</td>
                        <td>@result.ElapsedMilliseconds</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<div>
    @if (results != null && results.Count > 0)
    {
        //TOADD CHART
    }
</div>

@code {
    private bool isLoading = false;
    private List<QueryResult> results = new List<QueryResult>();
    private RabbitMqConsumer _rabbitMqConsumer;
    private List<string> latestMessages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        _rabbitMqConsumer = new RabbitMqConsumer();
        _rabbitMqConsumer.StartConsuming(OnMessageReceived);

        await Task.CompletedTask;
    }

    private void OnMessageReceived(string message)
    {
        latestMessages.Add(message);
        InvokeAsync(StateHasChanged);
    }

    private async Task RunQueries()
    {
        isLoading = true;
        latestMessages = new List<string>();
        results = new List<QueryResult>();
        StateHasChanged();

        try
        {
            var response = await HttpClientFactory
                .CreateClient("QueryPerformance")
                .GetAsync("http://localhost:5141/run-queries");
            if (response.IsSuccessStatusCode)
            {
                var queryResults = await response.Content.ReadFromJsonAsync<List<QueryResult>>();
                results = queryResults;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void PrepareChartData(List<QueryResult> queryResults)
    {
        //TODO
    }
}