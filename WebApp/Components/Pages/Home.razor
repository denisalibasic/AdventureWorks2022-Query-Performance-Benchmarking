@page "/"
@inject HttpClient Http
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>
<p>Welcome to your new app.</p>

<button @onclick="RunQueries" class="btn btn-primary" disabled="@isLoading">
    @if (isLoading)
    {
        <div>
            <h2>Latest Message</h2>
            @if (latestMessage != "")
            {
                <p>@latestMessage</p>
            }
        </div>
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        <span>Loading...</span>
    }
    else
    {
        <span>Run Queries</span>
    }
</button>

<div>
    @if (results != null && results.Count > 0)
    {
        //TOADD CHART
    }
</div>

@code {
    private bool isLoading = false;
    private List<QueryResult> results = new List<QueryResult>();
    private HubConnection hubConnection;
    private string latestMessage;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/queryResultHub"))
            .Build();

        hubConnection.On<string>("ReceiveQueryResult", (message) =>
        {
            latestMessage = message;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task RunQueries()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var response = await Http.GetAsync("http://localhost:5141/run-queries");
            if (response.IsSuccessStatusCode)
            {
                results = await response.Content.ReadFromJsonAsync<List<QueryResult>>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void PrepareChartData(List<QueryResult> queryResults)
    {
        //TODO
    }
}